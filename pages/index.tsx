import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react';
import styles from '../styles/Home.module.css'
import config from "../config.json"
import Card from '../components/Card';
import Link from 'next/link';
import { GetStaticProps, InferGetStaticPropsType } from 'next'
import { useDispatch } from 'react-redux';
import { deletePost} from '../redux/postSlice';

interface ListItem {
  id: number;
  userId: number;
  body: string;
  title: string;
}

export const getStaticProps: GetStaticProps<{ posts: ListItem[] }> = async () => {
  const posts = await (await fetch(config.API_URL)).json();
  
  return {
    props: {
      posts
    },
  }
}
export default function Home({ posts }: InferGetStaticPropsType<typeof getStaticProps>) {
  const [data, setData] = useState<ListItem[]>([]);
  const [listItem, setListItem] = useState<ListItem[]>([]);
  const [perPage, setPerpage] = useState(14);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPage, setTotalPage] = useState<number[]>([]);
  const dispatch = useDispatch();

  const pagination = async (pageNum: number, data: ListItem[]) => {
    const pageCount = Math.ceil(data.length / perPage);
    const arrPageNumber: number[] = [];
    for (let i = 1; i <= pageCount; i++) {
      arrPageNumber.push(i)
    }
    setTotalPage(arrPageNumber)
    setCurrentPage(pageNum);
    const prevRange = (pageNum - 1) * perPage;
    const currRange = pageNum * perPage;
    setListItem(data.slice(prevRange, currRange));
  }

  const fetchData = async () => {
    localStorage.setItem('data', JSON.stringify(posts));
    setData(posts);
    pagination(1, posts)
  }
  const getData = async () => {
    const parseData = localStorage.getItem('data');
    if (typeof parseData === 'string') {
      const listPost = JSON.parse(parseData);
      setData(listPost);
      pagination(1, listPost);
    }
  };


  //Delete function for call API
  // const handleDelete = async (userId: number) => {
  //   await fetch(config.API_URL + '/' + userId, {
  //     method: 'DELETE',
  //   }).then((response) => response.json())
  //     .then(() => getData(1));
  // }

  //Delete function using local
  const handleDelete = async (id: number) => {
    const res = data.filter(data => data.id !== id)
    setData(res);
    localStorage.setItem('data', JSON.stringify(res));
    pagination(1, res);
    console.log(id);
    
    dispatch(deletePost(id))
  }

  useEffect(() => {
    if (!localStorage.getItem('data') || localStorage.getItem('data') === '[]' || !data) fetchData();
    getData();
  }, [])
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
      <Link href="/">
        Homepage
      </Link>
        <div className="w-full flex justify-start">
          <Link href="/posts/create">
            <button className='flex justify-center items-center rounded w-8 h-8 bg-lime-400 text-2xl text-white mb-5'>+</button>
          </Link>
        </div>
        <div className="flex flex-wrap gap-5 mb-8">
          {listItem && listItem.map((item: any) => {
            return (
              <Card key={item.title + item.userId} userId={item.userId} id={item.id}
                title={item.title} body={item.body} handleDelete={handleDelete} />
            )
          })}

        </div>

        <div className="flex gap-4 flex-wrap">
          {totalPage.map(item => <button className='w-8 h-8 bg-cyan-300 rounded text-sm font-semibold' key={item} onClick={() => pagination(item, data)}>{item}</button>)}
        </div>
      </main>
    </div>
  )
}
